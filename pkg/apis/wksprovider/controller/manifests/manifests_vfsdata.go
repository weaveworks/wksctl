// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Manifests statically implements the virtual filesystem provided to vfsgen.
var Manifests = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 5, 19, 21, 4, 6, 565583115, time.UTC),
		},
		"/01_namespace.yaml": &vfsgen۰FileInfo{
			name:    "01_namespace.yaml",
			modTime: time.Date(2020, 5, 8, 13, 59, 12, 351060757, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6c\x61\x62\x65\x6c\x73\x3a\x0a\x20\x20\x20\x20\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x74\x6f\x6f\x6c\x73\x2e\x6b\x38\x73\x2e\x69\x6f\x3a\x20\x22\x31\x2e\x30\x22\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a"),
		},
		"/02_rbac.yaml": &vfsgen۰CompressedFileInfo{
			name:             "02_rbac.yaml",
			modTime:          time.Date(2020, 5, 8, 13, 59, 12, 351927700, time.UTC),
			uncompressedSize: 1131,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\xb1\x92\xd3\x30\x10\xed\xfd\x15\x3b\x77\xb5\x93\xa1\x63\xdc\x01\x05\x05\xdd\x1d\x03\xf5\x5a\x7a\x89\x45\x64\xad\x90\x56\xce\x1c\x5f\xcf\x58\x8e\xc3\xe5\x02\x19\x18\x8a\xab\xfc\x56\x5a\xed\xbe\xf7\x3c\xaf\x6d\xdb\x86\xa3\xfb\x82\x94\x9d\x84\x8e\x52\xcf\x66\xc3\x45\x07\x49\xee\x07\xab\x93\xb0\x39\xbc\xcd\x1b\x27\xdb\xe9\x4d\x73\x70\xc1\x76\xf4\xc1\x97\xac\x48\x0f\xe2\xd1\x8c\x50\xb6\xac\xdc\x35\x44\x81\x47\x74\x74\x3c\xe4\xd6\x48\xd0\x24\xde\x23\xb5\x69\xee\x4a\xc5\x23\x77\x4d\x4b\x1c\xdd\xc7\x24\x25\xe6\xb9\xbf\x25\xb3\x4c\x3a\x6d\x68\x88\x12\xb2\x94\x64\x70\x79\x9f\x6b\x31\xb2\x19\x5c\xc0\x65\xb1\xcd\xca\x5a\x2e\xce\x2c\xa2\x97\xa7\x11\x41\x2f\x5b\x51\xeb\x09\xa9\x3f\x4d\xdf\x43\xeb\xd7\xbb\xbc\x80\x23\xab\x19\x96\xc5\x09\xac\xa8\xb0\x44\xbb\xc2\x78\xbe\xb7\xf0\x50\x5c\x0b\xba\xbb\x7b\x29\xe2\x9e\xa2\xd8\xbc\xc5\xe4\xcc\x6c\x26\xb9\x4c\x09\xdf\x8b\x4b\xb0\xb4\x93\x44\x3a\x80\xbe\x7e\x7a\xa4\x5f\x96\x91\x0a\xf5\x20\xee\x3d\x66\x58\x5f\xd6\x21\x75\x5a\x89\x12\x56\x49\x0b\x0d\x27\x21\x6f\x16\x7e\xcf\x37\x9d\x4f\x2a\x08\x62\x4f\xce\x61\x3a\x3b\x93\x61\xd2\xeb\xb8\xd2\xce\x7a\x77\x6e\x3f\x72\xbc\xb5\xfe\x9e\x3e\x0f\xa0\x1e\x5e\x8e\xff\x6e\xdc\xc2\x86\x2c\x63\x94\x50\xff\xfe\x9f\xdd\xbb\xa2\xcc\xb1\x12\x7b\x41\xfa\xd9\xac\xdf\x92\x5e\x0d\xf8\xaf\x4c\xbd\x77\xc1\xba\xb0\xff\xbb\x68\xf5\xa7\xe6\x19\x3f\x60\x37\xf7\xae\x4a\x6e\xec\x6d\x88\xae\xa3\x7c\x2b\xc0\xb9\xf4\xdf\x60\xb4\x66\x78\x79\xf9\x88\x34\x39\x83\x77\xc6\x48\x09\x7a\x7e\x6c\xb1\xe3\xe2\xd7\x3a\x47\x36\xe8\x28\x3f\x65\xc5\xd8\xfc\x0c\x00\x00\xff\xff\x3c\x15\x72\x25\x6b\x04\x00\x00"),
		},
		"/03_secrets.yaml": &vfsgen۰FileInfo{
			name:    "03_secrets.yaml",
			modTime: time.Date(2020, 5, 8, 13, 59, 12, 352098811, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x53\x65\x63\x72\x65\x74\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x77\x6b\x73\x2d\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x73\x65\x63\x72\x65\x74\x73\x0a\x20\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a\x74\x79\x70\x65\x3a\x20\x4f\x70\x61\x71\x75\x65\x0a\x64\x61\x74\x61\x3a\x0a\x20\x20\x73\x73\x68\x4b\x65\x79\x3a\x20\x22\x22\x0a"),
		},
		"/04_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "04_controller.yaml",
			modTime:          time.Date(2020, 5, 19, 21, 4, 6, 545973395, time.UTC),
			uncompressedSize: 1529,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4b\x73\xe3\x36\x0c\xbe\xfb\x57\x60\xdc\x6b\xe4\x47\x7b\xe9\xf0\x96\x69\x73\x6b\xda\x99\xa6\xd3\x3b\x4c\x22\x11\x57\x7c\x2d\x00\xd9\xd1\xbf\xdf\xa1\xac\xc8\xf6\x8e\x13\x67\x57\x37\xe1\xf1\x3d\x40\x82\x4d\xd3\x2c\xb0\xf8\xff\x89\xc5\xe7\x64\x00\x4b\x91\xf5\x7e\xbb\xe8\x7c\x72\x06\xfe\xa4\x12\xf2\x10\x29\xe9\x22\x92\xa2\x43\x45\xb3\x00\x48\x18\xc9\xc0\xa1\x93\xc6\xe6\xa4\x9c\x43\x20\x9e\xc2\x52\xd0\x92\x01\x19\x44\x29\x2e\x00\x02\xee\x28\x48\x6d\x7a\xb7\x0d\x60\xfa\x6d\x4a\xc0\xf4\x61\x45\x20\x6e\x34\xe7\x20\xab\xee\x77\x59\xf9\x6c\x60\xb9\x5d\x6d\x96\x0b\x29\x64\x2b\x07\x53\x09\xde\xa2\x18\xd8\x2e\x00\x84\x02\x59\xcd\x7c\x64\x8f\xa8\xb6\xfd\xeb\x4c\xce\xbb\x82\x94\x62\x09\xa8\x34\xf5\x9d\x19\xaf\x5f\xb8\x80\xf8\xc0\xd5\xe7\x9c\x7d\xc2\x5d\x2d\x79\x73\x38\x32\x66\x47\x4f\x17\xde\xde\xa2\x0d\xe7\x40\xab\xae\xdf\x11\x27\x52\xaa\x20\xeb\x88\xa2\xc4\x06\x96\xcb\xa9\x54\x73\x20\x46\xf5\x39\xcd\x2e\x7e\x81\xfb\x10\xf2\x01\xc4\xb6\xe4\xfa\xe0\xd3\x0b\xe4\x04\xc7\xce\x11\x58\x56\xf0\x5f\xeb\x05\xbc\x00\xd3\xd7\xde\x33\x39\xd8\x91\xc5\x5e\x08\x5c\xcf\x3e\xbd\xcc\x48\xbb\x9c\x55\x94\xb1\x94\x11\xe6\x19\xb4\x25\xb0\xa1\xaf\x58\x77\x70\x20\x88\x38\x80\x4f\x5e\x3d\x86\x30\x40\x8b\x7b\x82\x2f\xbd\x28\xe4\x44\x13\xe5\xdd\x0c\x86\xc9\xc1\x21\xf7\xc1\x55\x94\x04\x89\xc8\x81\x66\x70\xe3\xbd\x04\xad\x92\x4e\xc3\xab\x35\x4c\x35\x2f\xa4\x23\x2d\x25\xf5\x4c\x33\xda\xa4\x02\xfa\xb2\x9a\x62\x0d\xd0\xf3\x33\x59\x35\xf0\x77\x7e\x3a\x9a\xa7\x79\xa2\x1d\x0d\xe6\xc6\x58\xe7\xda\x5c\xea\x4c\x33\x1b\x78\x78\xf5\xa2\x32\x73\x3e\x22\x77\x47\xa1\x28\x80\x60\xd9\xab\xb7\x18\x00\x9d\xcb\xc9\xcc\x32\x46\xae\x3f\xa6\xe4\x7d\xcd\xc9\x3f\x29\x0c\xb7\xf1\x6b\xd5\xdb\xb9\x51\x3d\xb5\xf1\xb8\xe0\xd0\x7a\xdb\x02\x32\x01\x13\xba\x61\x1c\x24\x13\xda\x16\x77\x81\xcc\x15\xf7\x0f\xaf\x64\x7b\xbd\x62\x7e\x85\xa1\xb4\xf8\x9d\xfb\x94\xf5\xdf\x8a\x7b\x4b\xdf\xcf\x33\xf4\x69\x96\x7b\x8b\xa4\xde\x00\xf4\x89\x58\x4e\xc6\x8e\x5b\x79\x65\xd7\x7c\xc4\x17\x32\xe0\xb2\xed\x88\x2b\xd1\x81\x70\x4f\x87\xcc\x9d\xac\x2f\xd7\xd3\xd4\x37\x40\xf4\x6c\x4b\x63\xc4\xe4\x4e\x1b\xd7\xc0\x7a\xe7\xd3\xfa\x0a\x49\x03\x4d\xb3\x27\xde\x65\x39\x89\x67\x92\xdc\xb3\xa5\xb3\xa7\x03\x20\xf8\xe8\xf5\x22\x02\x60\x4b\x6f\x60\xbb\xd9\xc4\x8b\x68\xa4\x98\x79\x30\xf0\xdb\xe6\xd1\x9f\x25\xea\x36\x92\xfc\x18\xc4\xaf\x15\xe2\x5b\x00\x00\x00\xff\xff\xdb\xca\x70\x5c\xf9\x05\x00\x00"),
		},
		"/05_sealed_secret_crd.yaml": &vfsgen۰CompressedFileInfo{
			name:             "05_sealed_secret_crd.yaml",
			modTime:          time.Date(2020, 5, 8, 13, 59, 12, 352480401, time.UTC),
			uncompressedSize: 302,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd0\xbd\x4e\xc5\x30\x0c\x05\xe0\x3d\x4f\xe1\x17\x68\x51\x37\x94\x15\x36\x10\x03\x57\x62\xf7\x4d\x0f\x17\xab\xf9\x53\xec\x54\x3c\x3e\x6a\x2a\x24\x7e\xc6\xe4\xb3\xcf\x91\x3c\x4d\x93\xe3\x2a\x6f\x68\x2a\x25\x7b\xe2\x2a\xf8\x34\xe4\xe3\xa5\xf3\x76\xaf\xb3\x94\xbb\x7d\xb9\xc2\x78\x71\x9b\xe4\xd5\xd3\x43\x57\x2b\xe9\x15\x5a\x7a\x0b\x78\xc4\xbb\x64\x31\x29\xd9\x25\x18\xaf\x6c\xec\x1d\x51\xe6\x04\x4f\x0a\x8e\x58\x15\xa1\xc1\x74\xbe\x8a\x65\x4e\x32\x87\x92\x9c\x56\x84\x63\xee\xd6\x4a\xaf\x9e\x7e\xd2\xb9\xac\x87\x12\x9d\x95\x97\x91\x73\x19\x39\xe3\x3b\x8a\xda\xd3\x3f\x7a\x16\x3d\xb9\xc6\xde\x38\xfe\xe9\x1f\xa2\x92\x6f\x3d\x72\xfb\x6d\x8e\x48\x43\xa9\xf0\xf4\x72\x54\x57\x0e\x58\x1d\xd1\xfe\x7d\x95\x7d\xe1\x58\x3f\x78\xf9\x0a\x00\x00\xff\xff\x7b\xe7\x31\x16\x2e\x01\x00\x00"),
		},
		"/06_sealed_secret_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "06_sealed_secret_controller.yaml",
			modTime:          time.Date(2020, 5, 8, 13, 59, 12, 352634417, time.UTC),
			uncompressedSize: 4505,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5d\x53\x5b\x37\x10\x7d\xf7\xaf\xd8\x49\xa7\x93\x97\x5c\x83\x9b\xd2\x61\xf4\x46\x49\x4b\x3b\x93\x52\x0f\x94\xbe\x74\xfa\x20\x4b\x6b\x5b\x41\x5f\x91\x56\x86\x9b\x4e\xff\x7b\x47\xf2\xf5\xfd\x00\x3b\x35\x90\x0c\xf8\xe9\xb2\x5a\xed\x9e\x3d\x3a\x5a\x2d\x55\x55\x8d\xb8\x57\x7f\x62\x88\xca\x59\x06\xab\xc9\xe8\x5a\x59\xc9\xe0\x12\xc3\x4a\x09\x1c\x19\x24\x2e\x39\x71\x36\x02\xe0\xd6\x3a\xe2\xa4\x9c\x8d\x0c\xfe\xf9\x77\x04\xa0\xf9\x0c\x75\xcc\x6b\x00\x96\x1b\x64\x10\x91\x6b\x94\x55\x44\x11\x90\x62\x25\x9c\xa5\xe0\xb4\xc6\x30\xda\xd7\x23\x7a\x2e\x90\xc1\x75\x9a\x61\x15\xeb\x48\x68\x46\xd1\xa3\xc8\x49\xbc\x0b\x54\xb2\x55\xe5\x93\xc1\xf1\xe1\xf1\x61\x49\x4e\x3c\x2c\x90\xa6\x7d\x63\x44\x8d\x82\x5c\xd8\x17\x1d\xd5\x1e\x19\x9c\xea\x14\x09\xc3\xaf\xd3\xd1\x5d\x6a\xc2\x8c\x8b\x31\x4f\xb4\x74\x41\x7d\x2a\x2c\x8c\xaf\x8f\xe3\x58\xb9\x83\x96\xb4\x0b\xa7\xf1\x47\x65\xa5\xb2\x8b\xa7\x12\x17\xd7\xfc\x57\x3e\xb8\x5b\xb5\x9b\xbd\xed\x6e\x5b\x28\x0c\x4e\xe3\x05\xce\x0b\x1a\xaf\xce\x82\x4b\xfe\x33\x25\x8d\x00\xba\x8a\xf6\xcd\x1d\xd3\xec\x03\x8a\x7c\x40\xd5\x83\x72\x14\xc7\x2e\x49\xc1\xcb\xf2\x0e\xb4\xa4\x04\x27\x94\xf7\xce\x82\x7b\x1f\x3b\xda\xdf\xa1\xd7\xae\x36\x68\xe9\x65\xc9\xd5\x28\x7b\x81\x5c\xd6\x97\x28\x9c\x95\x91\xc1\xdb\xac\xcb\x80\x5e\x2b\xc1\x23\x83\x49\xf9\x6b\xa5\x72\x4d\xbf\xa8\x48\x2e\xd4\xef\x95\x51\xc4\x60\x72\x5f\xc0\x86\x93\x58\xbe\xef\x15\xb0\x0f\xc0\x48\x81\x13\x2e\xea\xf5\x8e\x6c\x56\x76\x71\xe5\x25\x27\xdc\x04\x31\xfc\xf6\x32\x85\x05\x32\xf8\xee\xe8\xdb\xce\x76\x65\xf9\x8a\x2b\xcd\x67\xba\xb7\xb2\xbe\x22\x17\xfd\x30\xf9\xe2\xa0\xf1\xba\x8d\xd8\x3f\x81\xfc\xbb\x7f\x0a\xf9\xa7\x07\x85\xec\x53\x0a\xc0\x86\xd6\x82\xc4\x69\x0c\x4d\xd4\xc6\xf4\x0d\x9c\x68\xed\x6e\x20\x8a\x25\xca\x94\x11\x82\xb3\x60\x78\xbe\xce\x60\x9d\xc4\x38\x86\x3f\x96\x2a\x82\x8a\x10\xf0\x63\x52\x01\x25\xcc\x50\xf0\x14\x11\x64\x0a\xf9\xd2\x6e\x22\xcd\x9c\xa3\xcc\x9d\xf7\x25\xcc\x1c\x68\x89\x20\xd6\xad\xe1\x0d\xdc\x20\x18\x5e\x83\xb2\x8a\x14\xd7\xba\x86\x25\x5f\x21\x7c\x48\x91\xc0\x59\x6c\x52\xbe\x69\x83\x71\x2b\xe1\xc6\x25\x2d\x73\x14\x0b\x16\x51\x02\x39\x90\x45\xb5\x40\x19\x52\x57\x69\xf6\x09\x98\xd7\x23\x52\x49\x9b\x6f\x41\xc0\x36\x5a\x83\x02\x92\x1f\x37\xb6\x0a\x70\x3e\x47\x41\x0c\xce\xdd\xe5\xba\x78\x6c\x89\xbd\xc6\x9a\x95\xea\xab\xdc\x01\xc6\x59\xa6\xc1\x22\x61\x69\x5c\x6b\xa4\xad\xaf\xf3\x99\x53\x17\x18\xfc\x74\xab\x22\xc5\x66\x21\x83\xe3\xca\x62\x68\xa9\xae\x80\x87\x45\x64\xf0\xd7\xdf\xed\x5e\xe1\x8c\xe1\x56\x76\x27\x5a\xc1\x9d\xe3\xcb\x3f\xb4\xab\xc1\x2e\x65\x78\x56\xde\xc7\xc4\xeb\x8c\x67\xa6\xc8\x72\xa3\x0e\x76\xea\x80\xad\x0e\xc7\x93\xc9\xf8\x70\x18\x60\x9a\xb4\x9e\x3a\xad\x44\xcd\xe0\x44\xdf\xf0\x3a\xb6\xeb\x5a\xad\xd0\x62\x8c\xd3\xe0\x66\xd8\x81\x03\x58\x12\xf9\x33\xa4\xbe\x09\xc0\x73\x5a\x32\x38\x58\x22\xd7\xb4\xfc\x34\x5c\x2a\x4f\x4b\xde\xf5\x20\xcd\x6e\xb6\xc6\xbb\xc4\x14\x42\xa7\xc3\x47\xac\x1f\x76\x90\x29\x20\x97\xea\x6b\x95\x11\x51\xa4\xa0\xa8\x3e\x75\x96\xf0\x76\x10\x2a\xe7\xfd\xdd\xea\xfa\xc2\x39\xfa\x59\x69\x6c\x7a\x33\x50\x48\xd8\x77\x4b\xf6\x24\x9e\x3b\x9b\xdd\xb6\x2f\x5e\x45\x0c\xb9\xab\x1d\x4e\xba\xb4\x24\x95\x65\x30\xe7\x3a\x76\xee\x44\xf5\x5d\xd3\xca\xe9\x64\xf0\x37\x97\xec\x90\x44\x93\x2d\xd3\x75\xa5\x64\xfc\x3d\x02\x3b\x5b\xab\x91\xcb\xf5\x19\xf5\x14\x98\xaf\xf0\x69\x27\xef\x6e\x61\x27\x29\xf3\xd8\xbc\x6b\x3f\x1c\x1d\xbd\xfd\xbe\xf5\x2e\x2f\xe1\x89\x10\x19\xd4\xf9\x5e\xba\x20\x0c\x46\xd9\xd2\xc2\xce\x02\x17\x38\xc5\xa0\x9c\x1c\x3e\x15\x5d\xfd\xbd\xab\x87\xc6\x53\xfd\x4e\x85\x5e\x37\xed\xd7\xfc\xbc\x63\xcb\x97\x79\x40\xbf\xc2\xb0\x72\x8d\x75\xc5\xa5\x51\x76\x30\xa6\x0c\x66\xdd\xe6\xf8\x9e\x02\xfc\x91\xe4\x3f\x95\xf5\xae\xb8\x3d\x1d\xb6\x71\x9e\x34\x0e\x46\xb7\x66\xd0\x7e\xf5\xaa\x4c\x29\xd1\xa5\x20\xb0\xb1\x35\x61\x47\x00\x2b\x0c\xb3\xc6\x28\x02\xae\xe7\x81\x0a\xb4\x8a\xf4\x18\x2e\x9a\xe1\xfb\xb9\xf4\xf8\x48\xd9\xf5\x50\xf7\x92\xac\xa3\x27\x5b\xd2\x85\x97\xa6\xba\x3e\xe6\x87\x53\x7c\xa7\xb6\x9d\x0b\xbb\x34\xd5\xbc\xf3\x63\xe1\xcc\x36\x71\x65\x02\xb6\x4a\x6c\x81\xd4\xe9\x2b\x7f\xdc\xe4\xa1\xb8\x7c\xa5\xf5\x34\xfa\x78\xf9\x6e\x62\xf7\x64\x9c\x36\x13\x6e\x05\x12\x35\xee\x1b\x1e\x57\x68\x3f\x73\x39\x7c\xc1\xfc\x7f\xff\x78\x6f\x64\xf1\x22\xfa\xf1\x33\xb5\xb5\x2f\xfe\x3f\xf0\x3e\x2d\x2e\xbf\xde\x8d\xfd\x75\x9e\x93\xd8\xee\x61\xf4\x75\x4f\xaf\xdb\xf9\xbc\x27\xbc\x82\x34\x1e\x64\xa8\xf5\x4e\x85\x64\x29\xfe\x17\x00\x00\xff\xff\xd1\x93\xfb\x19\x99\x11\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_namespace.yaml"].(os.FileInfo),
		fs["/02_rbac.yaml"].(os.FileInfo),
		fs["/03_secrets.yaml"].(os.FileInfo),
		fs["/04_controller.yaml"].(os.FileInfo),
		fs["/05_sealed_secret_crd.yaml"].(os.FileInfo),
		fs["/06_sealed_secret_controller.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
