// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Manifests statically implements the virtual filesystem provided to vfsgen.
var Manifests = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 3, 30, 23, 38, 53, 575752872, time.UTC),
		},
		"/01_namespace.yaml": &vfsgen۰FileInfo{
			name:    "01_namespace.yaml",
			modTime: time.Date(2020, 1, 24, 15, 10, 9, 833744421, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6c\x61\x62\x65\x6c\x73\x3a\x0a\x20\x20\x20\x20\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x74\x6f\x6f\x6c\x73\x2e\x6b\x38\x73\x2e\x69\x6f\x3a\x20\x22\x31\x2e\x30\x22\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a"),
		},
		"/02_rbac.yaml": &vfsgen۰CompressedFileInfo{
			name:             "02_rbac.yaml",
			modTime:          time.Date(2020, 1, 24, 15, 10, 9, 833850828, time.UTC),
			uncompressedSize: 1131,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\xb1\x92\xd3\x30\x10\xed\xfd\x15\x3b\x77\xb5\x93\xa1\x63\xdc\x01\x05\x05\xdd\x1d\x03\xf5\x5a\x7a\x89\x45\x64\xad\x90\x56\xce\x1c\x5f\xcf\x58\x8e\xc3\xe5\x02\x19\x18\x8a\xab\xfc\x56\x5a\xed\xbe\xf7\x3c\xaf\x6d\xdb\x86\xa3\xfb\x82\x94\x9d\x84\x8e\x52\xcf\x66\xc3\x45\x07\x49\xee\x07\xab\x93\xb0\x39\xbc\xcd\x1b\x27\xdb\xe9\x4d\x73\x70\xc1\x76\xf4\xc1\x97\xac\x48\x0f\xe2\xd1\x8c\x50\xb6\xac\xdc\x35\x44\x81\x47\x74\x74\x3c\xe4\xd6\x48\xd0\x24\xde\x23\xb5\x69\xee\x4a\xc5\x23\x77\x4d\x4b\x1c\xdd\xc7\x24\x25\xe6\xb9\xbf\x25\xb3\x4c\x3a\x6d\x68\x88\x12\xb2\x94\x64\x70\x79\x9f\x6b\x31\xb2\x19\x5c\xc0\x65\xb1\xcd\xca\x5a\x2e\xce\x2c\xa2\x97\xa7\x11\x41\x2f\x5b\x51\xeb\x09\xa9\x3f\x4d\xdf\x43\xeb\xd7\xbb\xbc\x80\x23\xab\x19\x96\xc5\x09\xac\xa8\xb0\x44\xbb\xc2\x78\xbe\xb7\xf0\x50\x5c\x0b\xba\xbb\x7b\x29\xe2\x9e\xa2\xd8\xbc\xc5\xe4\xcc\x6c\x26\xb9\x4c\x09\xdf\x8b\x4b\xb0\xb4\x93\x44\x3a\x80\xbe\x7e\x7a\xa4\x5f\x96\x91\x0a\xf5\x20\xee\x3d\x66\x58\x5f\xd6\x21\x75\x5a\x89\x12\x56\x49\x0b\x0d\x27\x21\x6f\x16\x7e\xcf\x37\x9d\x4f\x2a\x08\x62\x4f\xce\x61\x3a\x3b\x93\x61\xd2\xeb\xb8\xd2\xce\x7a\x77\x6e\x3f\x72\xbc\xb5\xfe\x9e\x3e\x0f\xa0\x1e\x5e\x8e\xff\x6e\xdc\xc2\x86\x2c\x63\x94\x50\xff\xfe\x9f\xdd\xbb\xa2\xcc\xb1\x12\x7b\x41\xfa\xd9\xac\xdf\x92\x5e\x0d\xf8\xaf\x4c\xbd\x77\xc1\xba\xb0\xff\xbb\x68\xf5\xa7\xe6\x19\x3f\x60\x37\xf7\xae\x4a\x6e\xec\x6d\x88\xae\xa3\x7c\x2b\xc0\xb9\xf4\xdf\x60\xb4\x66\x78\x79\xf9\x88\x34\x39\x83\x77\xc6\x48\x09\x7a\x7e\x6c\xb1\xe3\xe2\xd7\x3a\x47\x36\xe8\x28\x3f\x65\xc5\xd8\xfc\x0c\x00\x00\xff\xff\x3c\x15\x72\x25\x6b\x04\x00\x00"),
		},
		"/03_secrets.yaml": &vfsgen۰FileInfo{
			name:    "03_secrets.yaml",
			modTime: time.Date(2020, 1, 24, 15, 10, 9, 833947090, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x53\x65\x63\x72\x65\x74\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x77\x6b\x73\x2d\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x73\x65\x63\x72\x65\x74\x73\x0a\x20\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a\x74\x79\x70\x65\x3a\x20\x4f\x70\x61\x71\x75\x65\x0a\x64\x61\x74\x61\x3a\x0a\x20\x20\x73\x73\x68\x4b\x65\x79\x3a\x20\x22\x22\x0a"),
		},
		"/04_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "04_controller.yaml",
			modTime:          time.Date(2020, 1, 24, 15, 10, 9, 834049456, time.UTC),
			uncompressedSize: 1519,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcb\x72\xdb\x3a\x0c\xdd\xfb\x2b\x30\xbe\xdb\xc8\x8f\xdb\x4d\x87\xbb\x4c\x9b\x5d\xd3\xce\x34\x9d\xee\x21\x12\x89\x58\xf1\x15\x02\x8c\xa3\xbf\xef\x50\x56\x64\xbb\xe3\xc4\x69\xbd\x33\x78\x70\x1e\x20\xa1\xa6\x69\x16\x98\xec\x4f\xca\x6c\x63\x50\x80\x29\xf1\xfa\x69\xbb\xe8\x6d\x30\x0a\x3e\x53\x72\x71\xf0\x14\x64\xe1\x49\xd0\xa0\xa0\x5a\x00\x04\xf4\xa4\x60\xd7\x73\xa3\x63\x90\x1c\x9d\xa3\x3c\x95\x39\xa1\x26\x05\x3c\xb0\x90\x5f\x00\x38\x6c\xc9\x71\x6d\x7a\xb5\x0d\x60\xfa\xdb\x24\x87\xe1\x4d\x84\xa3\xdc\x48\x8c\x8e\x57\xfd\x47\x5e\xd9\xa8\x60\xb9\x5d\x6d\x96\x0b\x4e\xa4\xab\x46\xa6\xe4\xac\x46\x56\xb0\x5d\x00\x30\x39\xd2\x12\xf3\x5e\xdd\xa3\xe8\xee\xcb\x91\x9d\x57\x0d\x09\xf9\xe4\x50\x68\xea\x3b\x0a\x5e\x7f\xee\x84\xe2\x8d\x54\xef\x4b\xf6\x8e\x74\x15\xf2\x92\x70\x54\x8c\x86\xee\x4e\xb2\xbd\x54\x9b\x1c\x1d\xad\xfa\xd2\x52\x0e\x24\x54\x49\xd6\x1e\x59\x28\x2b\x58\x2e\x27\xa8\x44\x47\x19\xc5\xc6\x30\xa7\xf8\x0f\xae\x9d\x8b\x3b\x60\xdd\x91\x29\xce\x86\x07\x88\x01\xf6\x9d\x23\x31\xaf\xe0\x47\x67\x19\x2c\x43\xa6\xc7\x62\x33\x19\x68\x49\x63\x61\x02\x53\xb2\x0d\x0f\x33\x53\x1b\xa3\xb0\x64\x4c\x69\xa4\xb9\x07\xe9\x08\xb4\x2b\x95\xeb\x0a\x76\x04\x1e\x07\xb0\xc1\x8a\x45\xe7\x06\xe8\xf0\x89\xe0\x57\x61\x81\x18\x68\x92\xbc\x9a\xc9\x30\x18\xd8\xc5\xe2\x4c\x65\x09\x10\x88\x0c\x48\x04\x33\xbe\x4b\x90\x6a\xe9\x30\xbc\x8a\xc9\x54\xcf\x99\x64\x94\xa5\x20\x36\xd3\xcc\x36\xb9\x80\x92\x56\x53\xad\x01\xba\xbf\x27\x2d\x0a\xbe\xc6\xbb\x7d\x78\x9a\x27\xda\xd3\xa0\x2e\x8c\x75\xc6\xc6\x54\x67\x1a\xb3\x82\x9b\x67\xcb\xc2\xb3\xe6\x2d\xe6\x7e\x6f\x14\x19\x10\x74\xb6\x62\x35\x3a\x40\x63\x62\x50\xb3\x8d\x51\xeb\xd3\x74\x78\x5d\xcf\xf8\x5b\x70\xc3\x65\xfe\x8a\x7a\xb9\x37\xaa\xb7\x36\x5e\x17\xec\x3a\xab\x3b\xc0\x4c\x90\x09\xcd\x30\x0e\x32\x13\xea\x0e\x5b\x47\xea\x4c\xfa\x9b\x67\xd2\x45\xce\x84\x5f\xa1\x4b\x1d\xfe\x91\x3e\x44\xf9\x5e\x79\x2f\xf9\xfb\x77\x85\x12\x66\xbb\x97\x44\xea\x0b\x40\x1b\x28\xf3\x21\xd8\x7e\x2b\xcf\xec\x9a\xf5\xf8\x40\x0a\x1e\x0b\x0e\x55\x66\xd7\xb3\x16\xb7\x3e\x00\x55\xdd\x7c\x96\xa3\xdd\xf4\x1e\x83\x39\xec\x59\x03\xeb\xd6\x86\xf5\x19\xea\x06\x9a\xe6\x89\x72\x1b\xf9\x60\x39\x13\xc7\x92\x35\x1d\x7d\x30\x00\x9c\xf5\x56\x4e\x2a\x00\x3a\x15\x05\xdb\xcd\xc6\x9f\x54\x3d\xf9\x98\x07\x05\x1f\x36\xb7\xf6\xe8\xa0\xee\x20\xf1\xdf\x51\xfc\x5f\x29\x7e\x07\x00\x00\xff\xff\x15\xfe\xa0\x39\xef\x05\x00\x00"),
		},
		"/05_sealed_secret_crd.yaml": &vfsgen۰CompressedFileInfo{
			name:             "05_sealed_secret_crd.yaml",
			modTime:          time.Date(2020, 3, 31, 0, 14, 0, 666234000, time.UTC),
			uncompressedSize: 302,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd0\xbd\x4e\xc5\x30\x0c\x05\xe0\x3d\x4f\xe1\x17\x68\x51\x37\x94\x15\x36\x10\x03\x57\x62\xf7\x4d\x0f\x17\xab\xf9\x53\xec\x54\x3c\x3e\x6a\x2a\x24\x7e\xc6\xe4\xb3\xcf\x91\x3c\x4d\x93\xe3\x2a\x6f\x68\x2a\x25\x7b\xe2\x2a\xf8\x34\xe4\xe3\xa5\xf3\x76\xaf\xb3\x94\xbb\x7d\xb9\xc2\x78\x71\x9b\xe4\xd5\xd3\x43\x57\x2b\xe9\x15\x5a\x7a\x0b\x78\xc4\xbb\x64\x31\x29\xd9\x25\x18\xaf\x6c\xec\x1d\x51\xe6\x04\x4f\x0a\x8e\x58\x15\xa1\xc1\x74\xbe\x8a\x65\x4e\x32\x87\x92\x9c\x56\x84\x63\xee\xd6\x4a\xaf\x9e\x7e\xd2\xb9\xac\x87\x12\x9d\x95\x97\x91\x73\x19\x39\xe3\x3b\x8a\xda\xd3\x3f\x7a\x16\x3d\xb9\xc6\xde\x38\xfe\xe9\x1f\xa2\x92\x6f\x3d\x72\xfb\x6d\x8e\x48\x43\xa9\xf0\xf4\x72\x54\x57\x0e\x58\x1d\xd1\xfe\x7d\x95\x7d\xe1\x58\x3f\x78\xf9\x0a\x00\x00\xff\xff\x7b\xe7\x31\x16\x2e\x01\x00\x00"),
		},
		"/06_sealed_secret_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "06_sealed_secret_controller.yaml",
			modTime:          time.Date(2020, 3, 30, 23, 38, 53, 576258759, time.UTC),
			uncompressedSize: 4535,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\x1b\x37\x10\xbd\xeb\x57\x0c\x52\x14\xb9\x64\x65\xab\x69\x8a\x60\x6f\x6e\xd2\xba\x05\x52\x57\xb0\xeb\x5e\x8a\x1e\x46\xdc\x91\xc4\x98\x5f\x21\x87\x6b\x6f\x8a\xfe\xf7\x82\xd4\x6a\x3f\x6c\x29\x95\xed\x04\xb1\x4e\xeb\x21\x39\xf3\xe6\xcd\xe3\x70\x5c\x14\xc5\x04\x9d\xfc\x93\x7c\x90\xd6\x94\x50\xcf\x26\x57\xd2\x54\x25\x5c\x90\xaf\xa5\xa0\x89\x26\xc6\x0a\x19\xcb\x09\x00\x1a\x63\x19\x59\x5a\x13\x4a\xf8\xe7\xdf\x09\x80\xc2\x05\xa9\x90\xd6\x00\x0c\x6a\x2a\x21\x10\x2a\xaa\x8a\x40\xc2\x13\x87\x42\x58\xc3\xde\x2a\x45\x7e\x72\xe8\x8e\xe0\x50\x50\x09\x57\x71\x41\x45\x68\x02\x93\x9e\x04\x47\x22\x05\x71\xd6\x73\x8e\x56\xe4\xcf\x12\x5e\x1f\xbf\x3e\xce\xc1\x19\xfd\x8a\x78\x3e\x34\x06\x52\x24\xd8\xfa\x43\xd1\x71\xe3\xa8\x84\x37\x2a\x06\x26\xff\xeb\x7c\x72\x9b\x1a\xbf\x40\x31\xc5\xc8\x6b\xeb\xe5\xc7\xcc\xc2\xf4\xea\x75\x98\x4a\x7b\x54\xcf\x16\xc4\xb8\x65\xee\xdc\x2a\xfa\x51\x9a\x4a\x9a\xd5\x63\xd9\x0b\x9b\x22\x14\xce\xdb\x1b\xb9\x9f\xc2\xdd\xdb\x76\xf0\xe8\xad\xa2\x73\x5a\x66\x34\x4e\x9e\x7a\x1b\xdd\x27\xf2\x9a\x00\xf4\x19\x1d\x1a\x3b\xc4\xc5\x7b\x12\xa9\x4a\xc5\xbd\x62\xe4\x8d\x7d\x90\x8c\xb7\x4c\x27\xc8\xb0\x14\xc8\x54\xdd\x29\x08\x3a\x17\x8e\x3a\xc1\xbe\x25\xa7\x6c\xa3\xc9\xf0\xd3\xd2\xac\x96\xe6\x9c\xb0\x6a\x2e\x48\x58\x53\x85\x12\x5e\x26\x71\x7a\x72\x4a\x0a\x0c\x25\xcc\xf2\x5f\xb5\x4c\x39\xfd\x22\x03\x5b\xdf\xbc\x93\x5a\x72\x09\xb3\xbb\x2a\xd6\xc8\x62\xfd\x6e\x90\xc0\x21\x00\x03\x7b\x64\x5a\x35\x9b\x13\xc9\x2c\xcd\xea\xd2\x55\xc8\xb4\x75\xa2\xf1\xe6\x22\xfa\x15\x95\xf0\xdd\xab\x6f\x7b\xdb\xa5\xc1\x1a\xa5\xc2\x85\x1a\xac\x6c\xee\xc9\xf9\xd0\x4d\xba\x3d\xa4\x9d\xea\x3c\x0e\x2b\x90\x7e\x77\xab\x90\x7e\x6a\x94\xc8\x21\xa9\x00\x6c\x69\xcd\x48\xac\x22\xdf\x7a\x6d\x4d\xdf\xc0\x89\x52\xf6\x1a\x82\x58\x53\x15\x13\x42\xb0\x06\x34\xa6\x3b\x0d\xc6\x56\x14\xa6\xf0\xc7\x5a\x06\x90\x01\x3c\x7d\x88\xd2\x53\x05\x0b\x12\x18\x03\x41\x15\x7d\xba\xb4\x5b\x4f\x0b\x6b\x39\x71\xe7\x5c\x76\xb3\x04\x5e\x13\x88\x4d\x7f\x78\x01\xd7\x04\x1a\x1b\x90\x46\xb2\x44\xa5\x1a\x58\x63\x4d\xf0\x3e\x06\x06\x6b\xa8\x0d\xf9\xa2\x73\x86\xa6\x82\x6b\x1b\x55\x95\xbc\x18\x30\x44\x15\xb0\x85\x2a\xab\x16\x38\x41\xea\x33\x4d\x7b\x3c\xa5\xf5\x40\x9c\xc3\xa6\x5b\xe0\xa9\xf3\xd6\xa2\x80\xe8\xa6\xad\xad\x00\x5a\x2e\x49\x70\x09\x67\xf6\x62\x93\x3c\x75\xc4\x5e\x51\x53\xe6\xec\x8b\xd4\x01\xa6\x49\xa6\xde\x10\x53\xee\x5e\x1b\xa4\xdd\x5e\xeb\x12\xa7\xd6\x97\xf0\xd3\x8d\x0c\x1c\xda\x85\x04\x0e\xa5\x21\xdf\x51\x5d\x00\xfa\x55\x28\xe1\xaf\xbf\xbb\xb3\xc2\x6a\x8d\xa6\xea\x2b\x5a\xc0\xad\xf2\xa5\x1f\x99\x7a\x74\x4a\x6a\x4c\xca\xfb\x10\xb1\x49\x78\x16\x92\x0d\x6a\x79\xb4\x57\x07\x65\x7d\x3c\x9d\xcd\xa6\xc7\x63\x07\xf3\xa8\xd4\xdc\x2a\x29\x9a\x12\x4e\xd4\x35\x36\xa1\x5b\x57\xb2\x26\x43\x21\xcc\xbd\x5d\x50\x0f\x0e\x60\xcd\xec\x4e\x89\x87\x26\x00\x87\xbc\x2e\xe1\x68\x4d\xa8\x78\xfd\x71\xbc\x94\xdf\x97\x74\xea\x5e\x9a\xdd\x1e\x0d\xb7\x89\xc9\x84\xce\xc7\x2f\xd9\xd0\xed\x28\x92\x27\xac\xe4\x97\x4a\x23\x90\x88\x5e\x72\xf3\xc6\x1a\xa6\x9b\x91\xab\x14\xf7\x77\xa3\x9a\x73\x6b\xf9\x67\xa9\xa8\xed\xcd\xc0\x3e\xd2\x70\x5b\x34\x27\xe1\xcc\x9a\xb4\x6d\xf7\xe2\x65\x20\x9f\xba\xda\xf1\xac\x0f\xcb\x95\x34\x25\x2c\x51\x85\x7e\x3b\x73\x73\xdb\x54\x5b\x15\x35\xfd\x66\xa3\x19\x93\xa8\x93\x65\xbe\xc9\x94\xb5\xbb\x43\x60\x6f\xeb\x34\x72\xb1\xa9\xd1\x40\x81\xe9\x0a\xbf\xe9\xe5\xdd\x2f\xec\x25\x65\x19\xda\x77\xed\x87\x57\xaf\x5e\x7e\xdf\xed\xce\x2f\xe1\x89\x10\x09\xd4\xd9\x41\xba\x60\xf2\x5a\x9a\xdc\xc2\x4e\x3d\x0a\x9a\x93\x97\xb6\x1a\x3f\x15\x7d\xfe\x83\xab\x47\xda\x71\xf3\x56\xfa\x41\x37\x1d\xe6\xfc\x04\x66\x97\xcf\xf3\x8a\x7e\x81\x89\xe5\x8a\x9a\x02\x2b\x2d\xcd\x68\x56\x19\x4d\xbd\x6d\x0d\x1f\x03\xfc\x31\x15\x78\x2c\xf5\x7d\x86\x07\x6e\xd8\x45\x7c\x54\x34\x1a\xe2\xda\xb9\xfb\xd9\xb3\x3c\xaf\x04\x1b\xbd\xa0\xd6\xd6\xba\x9d\x00\xd4\xe4\x17\xad\x51\x78\xda\x4c\x06\x05\x28\x19\xf8\xc1\x84\xb4\x03\xf9\xd7\x52\xe6\x03\x05\x38\x40\x3d\x08\xb2\xf1\x1e\x4d\x0e\xe7\x9f\xa4\xfe\x86\xc0\xef\xcf\xf3\xad\x04\xf7\x2e\xec\x53\x57\xfb\xf6\x4f\x85\xd5\xbb\x64\x96\x58\xd8\x29\xb6\x15\x71\xaf\xb4\xf4\x71\x9d\x06\xe5\xfc\x15\x37\x13\xea\xc3\x85\xbc\xf5\x3d\x10\x74\xdc\x4e\xbd\x05\x54\xa4\xe8\x50\xf7\x54\x93\xf9\xc4\x35\x71\x19\xf3\xff\xfd\x47\xbe\xd5\xc6\x93\x68\xcf\x5f\xb3\xcb\x7d\xf6\x7f\x8e\x0f\xe9\x78\xe9\x59\x6f\xed\xcf\xd3\x00\x55\xee\x9f\x52\x9f\x0f\x44\xbb\x9b\xd4\x3b\xea\xcb\x48\xc3\x51\x82\xda\xec\x95\x49\xd2\xe3\x7f\x01\x00\x00\xff\xff\xd7\x96\xe9\x45\xb7\x11\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_namespace.yaml"].(os.FileInfo),
		fs["/02_rbac.yaml"].(os.FileInfo),
		fs["/03_secrets.yaml"].(os.FileInfo),
		fs["/04_controller.yaml"].(os.FileInfo),
		fs["/05_sealed_secret_crd.yaml"].(os.FileInfo),
		fs["/06_sealed_secret_controller.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
