// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Manifests statically implements the virtual filesystem provided to vfsgen.
var Manifests = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/01_namespace.yaml": &vfsgen۰FileInfo{
			name:    "01_namespace.yaml",
			modTime: time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6c\x61\x62\x65\x6c\x73\x3a\x0a\x20\x20\x20\x20\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x74\x6f\x6f\x6c\x73\x2e\x6b\x38\x73\x2e\x69\x6f\x3a\x20\x22\x31\x2e\x30\x22\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a"),
		},
		"/02_rbac.yaml": &vfsgen۰CompressedFileInfo{
			name:             "02_rbac.yaml",
			modTime:          time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 3941,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x3d\x73\xdb\x30\x0c\xdd\xfd\x2b\x78\xc9\x90\xbb\xde\x49\xb9\x6e\x3d\x6d\x6d\x87\x0e\xdd\x92\x5c\x3b\x43\x14\x6c\xb1\xa6\x08\x96\x00\x6d\xa7\xbf\xbe\x27\xca\x72\xac\x58\x76\xec\x7c\xd5\x9d\x4c\x42\x20\xf1\x1e\x04\x3d\xbf\x2c\xcb\x26\xe0\xcd\x0f\x0c\x6c\xc8\x15\x2a\x94\xa0\x73\x88\x52\x53\x30\x7f\x40\x0c\xb9\x7c\xfe\x89\x73\x43\xd7\x8b\x8f\x93\xb9\x71\x55\xa1\xbe\xda\xc8\x82\xe1\x86\x2c\x4e\x1a\x14\xa8\x40\xa0\x98\x28\xe5\xa0\xc1\x42\x2d\xe7\x9c\x69\x72\x12\xc8\x5a\x0c\x59\x68\xb3\x42\xb4\xc8\xc5\x24\x53\xe0\xcd\xb7\x40\xd1\x73\x9b\x9f\x29\xdd\xdd\x94\xaf\xb2\xae\xc6\x44\xa9\x80\x4c\x31\x68\x1c\x66\x70\xda\x34\xa0\x6b\xe3\x70\xb8\xb9\x66\x01\x89\x83\x58\x85\xde\xd2\x7d\x83\x4e\x86\xa9\x98\xf6\x0b\x0c\xe5\xfa\xf6\x19\x4a\xfa\xb5\x86\xbb\xc5\x12\x44\xd7\xfb\x71\x2e\x11\x16\x98\x2f\x29\xcc\x79\x17\x2a\xae\x0c\x8b\x71\x33\xe3\xa6\x01\x06\xb8\x47\x9f\x6c\xe3\x1e\x24\x0c\x58\x8e\x3e\x79\x38\xfa\x34\x97\x04\x3f\x20\x08\xa6\x65\xf4\x55\xbf\xf4\x9b\xe7\x15\x5a\x14\xdc\xa5\x7d\x71\xf1\x98\xe5\xa5\xf2\x54\xf1\x35\x2e\x8c\x6e\x47\x43\x19\x56\x01\x7f\x47\x13\xb0\x52\x53\x0a\x4a\x6a\x54\x3f\xbf\xdf\xaa\x87\x01\x50\x42\xaa\x44\x05\xa5\xc5\x76\x99\x4e\xa6\x4b\xd2\x6d\xd1\x93\xeb\x5f\x4f\x07\xc3\x90\xe3\xbc\xc3\xb7\x5d\x69\x13\x49\x0b\x47\x55\xdf\x9f\xc5\xe6\x2d\x33\xea\x70\xec\x1b\x7e\xdd\xae\x64\x2d\xdf\xa9\x99\x35\xe0\x0f\x95\xbf\x54\x77\x35\xaa\x12\x2d\x2d\x4f\x6f\x5c\x87\x46\x55\x80\x0d\xb9\x34\xc9\xfb\xbb\xb7\x03\x19\xbc\x1f\x19\xd8\xad\xbb\x46\x41\xf7\x0d\x78\x91\x42\x7c\x31\xae\x32\x6e\x76\x9c\x50\x94\xeb\xe4\x76\x7d\x83\xd3\x36\xb7\x67\x72\xa0\xee\x44\xa9\x5d\x61\x3a\x24\x47\x1c\xcb\x5f\xa8\x25\x29\x52\x77\xf2\x16\xc3\xc2\x68\xfc\xac\x35\x45\x27\x9b\xc3\x15\x4e\x21\xda\x7e\xcf\x1e\x34\x16\x8a\xef\x59\xb0\x79\x61\x5b\x06\xfd\x48\x93\x68\xc8\xdd\x99\x06\x59\xa0\xf1\x85\x72\xd1\xda\x0d\x8c\x06\x1c\xcc\x9e\xd2\x52\xf0\x06\x57\x82\x8e\xd3\x0c\xec\xd5\xd3\xc8\x42\x4d\x1f\xac\x70\x6a\x9c\x49\x53\xf3\x3c\x61\x2c\x89\x84\x25\x80\xcf\x47\xa4\x3c\xeb\xa7\xd9\x5b\x70\x38\x9e\x91\x74\x8d\x25\x44\x2d\x31\x8c\xe6\x3c\x22\x70\xf5\xe1\x6a\x08\x75\xeb\x33\x5e\x0f\xec\x28\x81\x87\xef\x7a\xeb\x63\x7f\x1e\x2b\x5c\xf9\xfc\x69\xdc\xff\x27\xb7\xb3\xc4\x7c\xa2\x4d\xd8\xfd\x87\xfd\xd7\xf0\x0e\xfb\x92\xad\xf0\xd9\x41\xae\x11\xac\xd4\xba\x46\x3d\xe7\x7d\xf1\xe3\xec\xc8\x9b\xc0\xdb\x67\x05\xcf\xa4\x7b\xeb\xff\xd6\xc1\xfe\xbd\x40\x8e\xd9\x94\x8d\x5b\x1a\x2f\x7d\xa0\xde\x09\x45\x7a\x73\xf6\xfe\xf4\x46\x1d\xe0\x8b\xf8\xb5\x52\x7f\x1e\x1a\x78\x1c\x92\xf5\x9c\x79\x22\xcb\x3b\x81\xb7\x9a\xbc\x57\xf7\x87\xa7\xf8\xa1\x37\xb0\x8c\x03\xbb\xf5\x2a\x5e\xf1\x6f\x00\x00\x00\xff\xff\xc4\x9b\x85\x6a\x65\x0f\x00\x00"),
		},
		"/03_secrets.yaml": &vfsgen۰FileInfo{
			name:    "03_secrets.yaml",
			modTime: time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x53\x65\x63\x72\x65\x74\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x77\x6b\x73\x2d\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x73\x65\x63\x72\x65\x74\x73\x0a\x20\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a\x74\x79\x70\x65\x3a\x20\x4f\x70\x61\x71\x75\x65\x0a\x64\x61\x74\x61\x3a\x0a\x20\x20\x73\x73\x68\x4b\x65\x79\x3a\x20\x22\x22\x0a"),
		},
		"/04_capi_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "04_capi_controller.yaml",
			modTime:          time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 787,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x8f\x13\x31\x0c\x85\xef\xf3\x2b\x2c\x71\x9e\x69\x0b\x42\x42\xe1\xb4\x02\x6e\x2c\x1c\x90\xb8\xbb\x19\xb7\xb5\x9a\xc4\xc1\xf6\x2c\xf4\xdf\xa3\xb4\xc3\x30\x3d\x54\xeb\x53\x64\xe7\x7d\x79\x79\xee\xfb\xbe\xc3\xca\x3f\x49\x8d\xa5\x04\xc0\x5a\x6d\xf3\xb2\xeb\xce\x5c\xc6\x00\x9f\xa9\x26\xb9\x64\x2a\xde\x65\x72\x1c\xd1\x31\x74\x00\x05\x33\x05\x88\x58\xb9\x8f\x52\x5c\x25\x25\xd2\xb9\x6f\x15\x23\x05\xb0\x8b\x39\xe5\x0e\x20\xe1\x9e\x92\x35\xd5\x23\x9d\x55\x8a\x6d\xae\x54\x13\x47\xb4\x00\xbb\x0e\xc0\x28\x51\x74\xd1\x9b\x32\xa3\xc7\xd3\xd7\x15\xea\xb1\x09\xa7\x5c\x13\x3a\xcd\xc2\x95\xed\x56\xe9\x8e\xf1\x98\x02\xf0\xcf\x56\x2b\x97\x44\x8a\xce\x52\x16\xe9\x1b\x78\x4a\x49\x7e\x83\xc5\x13\x8d\x53\xe2\x72\x04\x29\x90\xd1\x9c\x14\x8a\x8c\x64\x1f\x41\xe9\xd7\xc4\x4a\x23\x8c\x93\xb6\x0b\x7b\x11\x37\x57\xac\x95\xcb\x71\x98\x41\x3d\xd0\xe1\x40\xd1\x03\x7c\x93\x1f\x37\x18\x2d\xf6\xce\x74\x09\x57\x5a\xaf\x92\x68\x38\x4f\x7b\xd2\x42\x4e\x36\xb0\x6c\x6e\x8f\x2d\x77\xa5\x36\x8f\xa2\x01\xbe\xfc\x61\x73\x5b\x8c\x3e\xa3\x9e\xc1\x4f\x6c\x80\x06\x08\x51\xd9\x39\x62\x02\x1c\x47\x29\x61\xb1\x71\x7d\xeb\xd3\x3c\x7c\x6a\x33\xfb\x5e\xd2\xe5\x35\x7e\x8b\x0d\xb9\x90\xda\x7f\xd4\x9c\xea\x7d\xa0\xad\x38\xe3\x91\x02\x4c\x36\x1c\xa3\xb6\x3f\x9c\x3f\x58\x8f\xea\x7c\xc0\xe8\xd6\x57\x95\x71\x13\xd3\xd4\xfe\xd5\x63\xe5\xf5\x79\xb5\x9f\xf0\xb2\x1d\xde\x0d\xef\x17\xaa\x92\xc9\xa4\x91\x56\x7b\x85\x6b\xf8\x64\x7e\xd7\x03\x88\x75\x0a\xb0\xdb\x6e\xf3\x5d\x37\x53\x16\xbd\x04\x78\xbb\x7d\xe6\xee\x6f\x00\x00\x00\xff\xff\xae\xfa\x8b\x40\x13\x03\x00\x00"),
		},
		"/04_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "04_controller.yaml",
			modTime:          time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 1512,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x73\xe3\x36\x0c\xbd\xfb\x57\x60\xdc\x6b\xa4\xd8\xe9\xa5\xc3\x5b\xa6\xcd\xad\x69\x67\x9a\xce\xde\x61\xea\xd9\xe2\x9a\x22\xb9\x00\x65\x47\xff\x7e\x87\xb2\xa2\xd8\x3b\x49\x9c\x5d\xdf\x0c\x3e\xbc\x0f\x90\x50\x55\x55\x0b\x4e\xee\x0b\x44\x5d\x0c\x86\x38\x25\xbd\x3d\xac\x17\x7b\x17\x1a\x43\x7f\x21\xf9\x38\x74\x08\x79\xd1\x21\x73\xc3\x99\xcd\x82\x28\x70\x07\x43\xc7\xbd\x56\x36\x86\x2c\xd1\x7b\xc8\x54\xd6\xc4\x16\x86\x74\xd0\x8c\x6e\x41\xe4\x79\x03\xaf\xa5\xe9\xdd\x36\xa2\xe9\x6f\x95\x3c\x87\x0f\x11\x1e\x52\xe5\x18\xbd\xd6\xfb\x3f\xb4\x76\xd1\xd0\x72\x5d\xaf\x96\x0b\x4d\xb0\x45\x43\x90\xbc\xb3\xac\x86\xd6\x0b\x22\x85\x87\xcd\x51\x4e\xea\x1d\x67\xdb\xfe\x7d\x66\xe7\x5d\x43\x19\x5d\xf2\x9c\x31\xf5\x9d\x05\x2f\x3f\x7f\x41\xf1\x41\xaa\xcf\x25\xfb\x44\xba\x02\x79\x49\x38\x2a\xc6\x06\x4f\x17\xd9\x5e\xaa\x95\x44\x8f\x7a\xdf\x6f\x20\x01\x19\x85\xe4\xb6\x63\xcd\x10\x43\xcb\xe5\x04\xcd\xd1\x43\x38\xbb\x18\xe6\x14\xbf\xd1\xbd\xf7\xf1\x48\x6a\x5b\x34\xbd\x77\x61\x47\x31\xd0\xa9\x73\x24\xd6\x9a\xfe\x6f\x9d\x92\x53\x12\x7c\xeb\x9d\xa0\xa1\x0d\x2c\xf7\x0a\x6a\x7a\x71\x61\x37\x33\x6d\x62\xcc\x9a\x85\x53\x1a\x69\xb6\x94\x5b\x90\xf5\x7d\xe1\xba\xa1\x23\xa8\xe3\x81\x5c\x70\xd9\xb1\xf7\x03\xb5\x7c\x00\x7d\xed\x35\x53\x0c\x98\x24\x6f\x66\x32\x0e\x0d\x1d\x63\xef\x9b\xc2\x12\x28\x00\x0d\xe5\x48\xcd\xf8\x2e\x29\x17\x4b\xaf\xc3\x2b\x18\x41\x39\x57\xe4\x51\x16\x21\x3b\xc1\xcc\x36\xb9\xa0\x3e\xd5\x53\xad\x22\x6c\xb7\xb0\xd9\xd0\x3f\xf1\xe9\x14\x1e\xf3\x44\xf7\x18\xcc\x95\xb1\xce\xd8\x98\xca\x4c\xa3\x18\x7a\x78\x76\x9a\x75\xd6\x7c\x64\xd9\x9f\x8c\xb2\x12\x93\x15\x97\x9d\x65\x4f\xdc\x34\x31\x98\xd9\xc6\xa8\xf5\xe7\x74\x78\x5f\xce\xf4\xdf\xe0\x87\xeb\xfc\x05\xf5\x72\x6f\x28\xb7\x36\x5e\x17\x1d\x5b\x67\x5b\x62\x01\x09\xb8\x19\xc6\x41\x0a\xd8\xb6\xbc\xf1\x30\x6f\xa4\x7f\x78\x86\xed\xf3\x1b\xe1\x6b\xf6\xa9\xe5\x1f\xd2\x87\x98\xff\x2b\xbc\xd7\xfc\xfd\xba\x42\x1f\x66\xbb\xd7\x44\xca\x0b\x60\x17\x20\xfa\x1a\xec\xb4\x95\x6f\xec\x9a\xeb\x78\x57\x36\x11\x7c\xc0\x31\xca\x5e\x6f\xa7\x57\x51\x71\x72\x15\x0a\xaf\x0b\x3b\x17\xb6\xc2\x67\xab\x6a\x0e\xab\x7a\x55\xdf\xcd\x2c\x2c\xbb\xb3\x4f\x40\x45\x55\x75\x80\x6c\xa2\xbe\x7a\x15\x68\xec\xc5\xe2\x0c\x46\xe4\x5d\xe7\xf2\x45\x85\xc8\xa6\xde\xd0\x7a\xb5\xea\x2e\xaa\x1d\xba\x28\x83\xa1\xdf\x57\x8f\xee\xec\xa0\x2c\x1f\xf4\xe7\x28\xee\x0a\xc5\xf7\x00\x00\x00\xff\xff\xc8\x59\xd1\xf0\xe8\x05\x00\x00"),
		},
		"/05_sealed_secret_crd.yaml": &vfsgen۰CompressedFileInfo{
			name:             "05_sealed_secret_crd.yaml",
			modTime:          time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 302,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd0\xbd\x4e\xc5\x30\x0c\x05\xe0\x3d\x4f\xe1\x17\x68\x51\x37\x94\x15\x36\x10\x03\x57\x62\xf7\x4d\x0f\x17\xab\xf9\x53\xec\x54\x3c\x3e\x6a\x2a\x24\x7e\xc6\xe4\xb3\xcf\x91\x3c\x4d\x93\xe3\x2a\x6f\x68\x2a\x25\x7b\xe2\x2a\xf8\x34\xe4\xe3\xa5\xf3\x76\xaf\xb3\x94\xbb\x7d\xb9\xc2\x78\x71\x9b\xe4\xd5\xd3\x43\x57\x2b\xe9\x15\x5a\x7a\x0b\x78\xc4\xbb\x64\x31\x29\xd9\x25\x18\xaf\x6c\xec\x1d\x51\xe6\x04\x4f\x0a\x8e\x58\x15\xa1\xc1\x74\xbe\x8a\x65\x4e\x32\x87\x92\x9c\x56\x84\x63\xee\xd6\x4a\xaf\x9e\x7e\xd2\xb9\xac\x87\x12\x9d\x95\x97\x91\x73\x19\x39\xe3\x3b\x8a\xda\xd3\x3f\x7a\x16\x3d\xb9\xc6\xde\x38\xfe\xe9\x1f\xa2\x92\x6f\x3d\x72\xfb\x6d\x8e\x48\x43\xa9\xf0\xf4\x72\x54\x57\x0e\x58\x1d\xd1\xfe\x7d\x95\x7d\xe1\x58\x3f\x78\xf9\x0a\x00\x00\xff\xff\x7b\xe7\x31\x16\x2e\x01\x00\x00"),
		},
		"/06_sealed_secret_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "06_sealed_secret_controller.yaml",
			modTime:          time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 4505,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5d\x53\x5b\x37\x10\x7d\xf7\xaf\xd8\x49\xa7\x93\x97\x5c\x83\x9b\xd2\x61\xf4\x46\x49\x4b\x3b\x93\x52\x0f\x94\xbe\x74\xfa\x20\x4b\x6b\x5b\x41\x5f\x91\x56\x86\x9b\x4e\xff\x7b\x47\xf2\xf5\xfd\x00\x3b\x35\x90\x0c\xf8\xe9\xb2\x5a\xed\x9e\x3d\x3a\x5a\x2d\x55\x55\x8d\xb8\x57\x7f\x62\x88\xca\x59\x06\xab\xc9\xe8\x5a\x59\xc9\xe0\x12\xc3\x4a\x09\x1c\x19\x24\x2e\x39\x71\x36\x02\xe0\xd6\x3a\xe2\xa4\x9c\x8d\x0c\xfe\xf9\x77\x04\xa0\xf9\x0c\x75\xcc\x6b\x00\x96\x1b\x64\x10\x91\x6b\x94\x55\x44\x11\x90\x62\x25\x9c\xa5\xe0\xb4\xc6\x30\xda\xd7\x23\x7a\x2e\x90\xc1\x75\x9a\x61\x15\xeb\x48\x68\x46\xd1\xa3\xc8\x49\xbc\x0b\x54\xb2\x55\xe5\x93\xc1\xf1\xe1\xf1\x61\x49\x4e\x3c\x2c\x90\xa6\x7d\x63\x44\x8d\x82\x5c\xd8\x17\x1d\xd5\x1e\x19\x9c\xea\x14\x09\xc3\xaf\xd3\xd1\x5d\x6a\xc2\x8c\x8b\x31\x4f\xb4\x74\x41\x7d\x2a\x2c\x8c\xaf\x8f\xe3\x58\xb9\x83\x96\xb4\x0b\xa7\xf1\x47\x65\xa5\xb2\x8b\xa7\x12\x17\xd7\xfc\x57\x3e\xb8\x5b\xb5\x9b\xbd\xed\x6e\x5b\x28\x0c\x4e\xe3\x05\xce\x0b\x1a\xaf\xce\x82\x4b\xfe\x33\x25\x8d\x00\xba\x8a\xf6\xcd\x1d\xd3\xec\x03\x8a\x7c\x40\xd5\x83\x72\x14\xc7\x2e\x49\xc1\xcb\xf2\x0e\xb4\xa4\x04\x27\x94\xf7\xce\x82\x7b\x1f\x3b\xda\xdf\xa1\xd7\xae\x36\x68\xe9\x65\xc9\xd5\x28\x7b\x81\x5c\xd6\x97\x28\x9c\x95\x91\xc1\xdb\xac\xcb\x80\x5e\x2b\xc1\x23\x83\x49\xf9\x6b\xa5\x72\x4d\xbf\xa8\x48\x2e\xd4\xef\x95\x51\xc4\x60\x72\x5f\xc0\x86\x93\x58\xbe\xef\x15\xb0\x0f\xc0\x48\x81\x13\x2e\xea\xf5\x8e\x6c\x56\x76\x71\xe5\x25\x27\xdc\x04\x31\xfc\xf6\x32\x85\x05\x32\xf8\xee\xe8\xdb\xce\x76\x65\xf9\x8a\x2b\xcd\x67\xba\xb7\xb2\xbe\x22\x17\xfd\x30\xf9\xe2\xa0\xf1\xba\x8d\xd8\x3f\x81\xfc\xbb\x7f\x0a\xf9\xa7\x07\x85\xec\x53\x0a\xc0\x86\xd6\x82\xc4\x69\x0c\x4d\xd4\xc6\xf4\x0d\x9c\x68\xed\x6e\x20\x8a\x25\xca\x94\x11\x82\xb3\x60\x78\xbe\xce\x60\x9d\xc4\x38\x86\x3f\x96\x2a\x82\x8a\x10\xf0\x63\x52\x01\x25\xcc\x50\xf0\x14\x11\x64\x0a\xf9\xd2\x6e\x22\xcd\x9c\xa3\xcc\x9d\xf7\x25\xcc\x1c\x68\x89\x20\xd6\xad\xe1\x0d\xdc\x20\x18\x5e\x83\xb2\x8a\x14\xd7\xba\x86\x25\x5f\x21\x7c\x48\x91\xc0\x59\x6c\x52\xbe\x69\x83\x71\x2b\xe1\xc6\x25\x2d\x73\x14\x0b\x16\x51\x02\x39\x90\x45\xb5\x40\x19\x52\x57\x69\xf6\x09\x98\xd7\x23\x52\x49\x9b\x6f\x41\xc0\x36\x5a\x83\x02\x92\x1f\x37\xb6\x0a\x70\x3e\x47\x41\x0c\xce\xdd\xe5\xba\x78\x6c\x89\xbd\xc6\x9a\x95\xea\xab\xdc\x01\xc6\x59\xa6\xc1\x22\x61\x69\x5c\x6b\xa4\xad\xaf\xf3\x99\x53\x17\x18\xfc\x74\xab\x22\xc5\x66\x21\x83\xe3\xca\x62\x68\xa9\xae\x80\x87\x45\x64\xf0\xd7\xdf\xed\x5e\xe1\x8c\xe1\x56\x76\x27\x5a\xc1\x9d\xe3\xcb\x3f\xb4\xab\xc1\x2e\x65\x78\x56\xde\xc7\xc4\xeb\x8c\x67\xa6\xc8\x72\xa3\x0e\x76\xea\x80\xad\x0e\xc7\x93\xc9\xf8\x70\x18\x60\x9a\xb4\x9e\x3a\xad\x44\xcd\xe0\x44\xdf\xf0\x3a\xb6\xeb\x5a\xad\xd0\x62\x8c\xd3\xe0\x66\xd8\x81\x03\x58\x12\xf9\x33\xa4\xbe\x09\xc0\x73\x5a\x32\x38\x58\x22\xd7\xb4\xfc\x34\x5c\x2a\x4f\x4b\xde\xf5\x20\xcd\x6e\xb6\xc6\xbb\xc4\x14\x42\xa7\xc3\x47\xac\x1f\x76\x90\x29\x20\x97\xea\x6b\x95\x11\x51\xa4\xa0\xa8\x3e\x75\x96\xf0\x76\x10\x2a\xe7\xfd\xdd\xea\xfa\xc2\x39\xfa\x59\x69\x6c\x7a\x33\x50\x48\xd8\x77\x4b\xf6\x24\x9e\x3b\x9b\xdd\xb6\x2f\x5e\x45\x0c\xb9\xab\x1d\x4e\xba\xb4\x24\x95\x65\x30\xe7\x3a\x76\xee\x44\xf5\x5d\xd3\xca\xe9\x64\xf0\x37\x97\xec\x90\x44\x93\x2d\xd3\x75\xa5\x64\xfc\x3d\x02\x3b\x5b\xab\x91\xcb\xf5\x19\xf5\x14\x98\xaf\xf0\x69\x27\xef\x6e\x61\x27\x29\xf3\xd8\xbc\x6b\x3f\x1c\x1d\xbd\xfd\xbe\xf5\x2e\x2f\xe1\x89\x10\x19\xd4\xf9\x5e\xba\x20\x0c\x46\xd9\xd2\xc2\xce\x02\x17\x38\xc5\xa0\x9c\x1c\x3e\x15\x5d\xfd\xbd\xab\x87\xc6\x53\xfd\x4e\x85\x5e\x37\xed\xd7\xfc\xbc\x63\xcb\x97\x79\x40\xbf\xc2\xb0\x72\x8d\x75\xc5\xa5\x51\x76\x30\xa6\x0c\x66\xdd\xe6\xf8\x9e\x02\xfc\x91\xe4\x3f\x95\xf5\xae\xb8\x3d\x1d\xb6\x71\x9e\x34\x0e\x46\xb7\x66\xd0\x7e\xf5\xaa\x4c\x29\xd1\xa5\x20\xb0\xb1\x35\x61\x47\x00\x2b\x0c\xb3\xc6\x28\x02\xae\xe7\x81\x0a\xb4\x8a\xf4\x18\x2e\x9a\xe1\xfb\xb9\xf4\xf8\x48\xd9\xf5\x50\xf7\x92\xac\xa3\x27\x5b\xd2\x85\x97\xa6\xba\x3e\xe6\x87\x53\x7c\xa7\xb6\x9d\x0b\xbb\x34\xd5\xbc\xf3\x63\xe1\xcc\x36\x71\x65\x02\xb6\x4a\x6c\x81\xd4\xe9\x2b\x7f\xdc\xe4\xa1\xb8\x7c\xa5\xf5\x34\xfa\x78\xf9\x6e\x62\xf7\x64\x9c\x36\x13\x6e\x05\x12\x35\xee\x1b\x1e\x57\x68\x3f\x73\x39\x7c\xc1\xfc\x7f\xff\x78\x6f\x64\xf1\x22\xfa\xf1\x33\xb5\xb5\x2f\xfe\x3f\xf0\x3e\x2d\x2e\xbf\xde\x8d\xfd\x75\x9e\x93\xd8\xee\x61\xf4\x75\x4f\xaf\xdb\xf9\xbc\x27\xbc\x82\x34\x1e\x64\xa8\xf5\x4e\x85\x64\x29\xfe\x17\x00\x00\xff\xff\xd1\x93\xfb\x19\x99\x11\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_namespace.yaml"].(os.FileInfo),
		fs["/02_rbac.yaml"].(os.FileInfo),
		fs["/03_secrets.yaml"].(os.FileInfo),
		fs["/04_capi_controller.yaml"].(os.FileInfo),
		fs["/04_controller.yaml"].(os.FileInfo),
		fs["/05_sealed_secret_crd.yaml"].(os.FileInfo),
		fs["/06_sealed_secret_controller.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
