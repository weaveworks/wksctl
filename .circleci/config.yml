version: 2

# https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
defaults: &defaults
  docker:
    - image: docker.io/weaveworks/wksctl-build:go-1.14.1-431fabe9
      environment:
        GOPATH: /go/
        SRCDIR: /src/github.com/weaveworks/wksctl
        KUBECTL_URL: https://dl.k8s.io/v1.18.5/kubernetes-client-linux-amd64.tar.gz
        KUBECTL_CHECKSUM: f6051fa7f715c68d56998d9b4c9be4f08552f3a8427b2c6b9e2e5339dd2929b6
  working_directory: /src/github.com/weaveworks/wksctl

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - container-tests: {}
      - unit-tests: {}
      - integration-tests-container:
          requires:
            - build
      - integration-tests-gcp-centos:
          requires:
            - build
      - integration-tests-gcp-ubuntu:
          requires:
            - build
      - integration-tests-gcp-rhel:
          requires:
            - build
      - release:
          requires:
            - build
            - unit-tests
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make
      - run:
          name: Check that generated files haven't been changed since checkout
          command: |
            echo "The following files have been modified since checkout or are unknown to Git:"
            ! (git status --porcelain | grep -E '^( M)|(??)')
      - persist_to_workspace:
          root: .
          paths:
          - kubectl
          - cmd/wksctl/wksctl
          - cmd/mock-https-authz-server/server
      - run:
          # Allow builds from forks
          name: Push image if docker login is available
          command: |
            if [ -n "$DOCKER_IO_PASSWORD" ]; then
              docker login -u "$DOCKER_IO_USER" -p "$DOCKER_IO_PASSWORD" docker.io
              make push
            fi
  unit-tests:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            curl -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin

      - run:
          name: Run unit tests
          command: |
            go version
            make unit-tests

  release:
    <<: *defaults
    steps:
      - checkout
      - run: curl -sL https://git.io/goreleaser | IMAGE_TAG=`tools/image-tag` bash

  container-tests:
    machine:
      docker_layer_caching: true
    environment:
      GOURL: https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz
      GOCHECKSUM: aed845e4185a0b2a3c3d5e1d0a35491702c55889192bb9c30e67a3de6849c067
      GOROOT: /home/circleci/goroot
      GOPATH: /home/circleci/go
      SRCDIR: /home/circleci/src/github.com/weaveworks/wksctl
    working_directory: /home/circleci/src/github.com/weaveworks/wksctl
    steps:
      - checkout
      - run:
          name: Install go
          command: |
            (cd ~ && curl -L $GOURL -o go.tar.gz && echo "$GOCHECKSUM go.tar.gz" | sha256sum -c)
            mkdir -p $GOROOT && tar xf ~/go.tar.gz -C $GOROOT --strip-components 1

      - run:
          name: Run container tests
          command: |
            export PATH=$GOROOT/bin:$PATH
            go version
            make container-tests
  integration-tests-container:
    machine:
      docker_layer_caching: true
    environment:
      GOURL: https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz
      GOCHECKSUM: aed845e4185a0b2a3c3d5e1d0a35491702c55889192bb9c30e67a3de6849c067
      GOROOT: /home/circleci/goroot
      GOPATH: /home/circleci/go
      SRCDIR: /home/circleci/src/github.com/weaveworks/wksctl
      FOOTLOOSE_URL: https://github.com/weaveworks/footloose/releases/download/0.5.0/footloose-0.5.0-linux-x86_64
      FOOTLOOSE_CHECKSUM: 0e4e49e81940c5876eafa26607154acd788d9979e9f4a4215f17532a3ea5429a
      KUBECTL_URL: https://dl.k8s.io/v1.18.5/kubernetes-client-linux-amd64.tar.gz
      KUBECTL_CHECKSUM: f6051fa7f715c68d56998d9b4c9be4f08552f3a8427b2c6b9e2e5339dd2929b6
      CAPEI_URL: https://github.com/weaveworks/cluster-api-provider-existinginfra/archive/v0.0.2.tar.gz
      CAPEI_CHECKSUM: a2d5d2a0f43a2c0872bcc96265d753868a4f0867f555743a5e280cff73f95cdc
    working_directory: /home/circleci/src/github.com/weaveworks/wksctl
    steps:
      - checkout
      - run:
          name: Install go
          command: |
            (cd ~ && curl -L $GOURL -o go.tar.gz && echo "$GOCHECKSUM go.tar.gz" | sha256sum -c)
            mkdir -p $GOROOT && tar xf ~/go.tar.gz -C $GOROOT --strip-components 1
      - run:
          name: Install footloose
          command: |
            curl -L $FOOTLOOSE_URL -o footloose
            echo "$FOOTLOOSE_CHECKSUM footloose" | sha256sum -c
            chmod +x footloose
            sudo mv footloose /usr/local/bin
      - run:
          name: Install kubectl
          command: |
            curl -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin
      - run:
          # TODO: Use CAPEI upstream when its build system has been set up
          name: Build cluster-api-provider-existinginfra
          command: |
            curl -L $CAPEI_URL -o capei.tar.gz
            echo "$CAPEI_CHECKSUM capei.tar.gz" | sha256sum -c
            mkdir -p /tmp/capei && tar xvzf capei.tar.gz -C /tmp/capei --strip-components=1
            export PATH=$GOROOT/bin:$PATH
            (cd /tmp/capei && docker build -t capei-controller .)
      - restore_cache:
          keys:
            - local-docker-registry-images
      - run:
          name: Run integration container tests
          command: |
            export PATH=$GOROOT/bin:$PATH
            go version
            make integration-tests-container
      - save_cache:
          key: local-docker-registry-images
          paths:
            # This ought to match the path mounted by the local Docker registry
            # in the integration tests.
            - "/tmp/registry"
  #
  # GCP tests are running under the `wks-tests` project for now.
  # https://console.cloud.google.com/compute/instances?project=wks-tests
  #
  integration-tests-gcp-centos:

    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/workspace
      - run: /tmp/workspace/cmd/wksctl/wksctl version
      - run:
          name: Install kubectl
          command: |
            curl -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin
      - run:
          name: Centos integration tests
          command: |
            if [ -n "$SECRET_KEY" ]; then
              export IMAGE_NAME=centos-cloud/centos-7
              export WKP_DEBUG=true
              $SRCDIR/test/integration/bin/up.sh
              $SRCDIR/test/integration/bin/test.sh
              $SRCDIR/test/integration/bin/down.sh
            fi
      - run: "true"
  integration-tests-gcp-ubuntu:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/workspace
      - run: /tmp/workspace/cmd/wksctl/wksctl version
      - run:
          name: Install kubectl
          command: |
            curl -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin

      - run:
          name: Ubuntu integration tests
          command: |
            if [ -n "$SECRET_KEY" ]; then
              export CREATE_IMAGE=0
              export USE_IMAGE=0
              export IMAGE_NAME=ubuntu-os-cloud/ubuntu-1804-bionic-v20190530
              $SRCDIR/test/integration/bin/up.sh
              $SRCDIR/test/integration/bin/test.sh
              $SRCDIR/test/integration/bin/down.sh
            fi
      - run: "true"
  integration-tests-gcp-rhel:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/workspace
      - run: /tmp/workspace/cmd/wksctl/wksctl version
      - run:
          name: Install kubectl
          command: |
            curl -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin

      - run:
          name: rhel integration tests
          command: |
            if [ -n "$SECRET_KEY" ]; then
              export IMAGE_NAME=rhel-cloud/rhel-7
              export WKP_DEBUG=false
              $SRCDIR/test/integration/bin/up.sh
              $SRCDIR/test/integration/bin/test.sh
              $SRCDIR/test/integration/bin/down.sh
            fi

      - run: "true"
